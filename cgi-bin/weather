#!/usr/bin/perl

# weather: RRD CGI graphing frontend by twitham@sbcglobal.net
# see wview-rrd for the backend data storage job, 2013/01

use strict;
use CGI qw/:all/;
use CGI::Carp qw(fatalsToBrowser);
our($inc, $basename) = ($0 =~ m@(.*)/(.*)$@);
require "$inc/rrdgraphcgi.pl";

# ------------------------------------------------------------

our $wview	= "wview.rrd";	# main RRD file
our $wind	= "wind.rrd";	# wind directions
our $rain	= "rain.rrd";	# rain total
our $title	= 'Wview Weather'; # title for the page
our $primary	= 'FF0000';	# primary metric color
our $secondary	= '0000FF';	# secondary metric color
our $third	= '008800';	# third metric color
our $indoor	= 'FF8000';	# indoor metric color
our $install	= 0;		# station install time in seconds
our $link	= '';		# optional header HTML, like:
# $link = ' See also: '. a({-href => '/weather/'}, 'wview page');
our %def = qw(temp F speed mph press inhg depth in);
# to override only a few: $def{temp} = 'C'; $def{press} = 'mbar';

$ENV{PATH} = "/usr/bin:$ENV{PATH}"; # for rrdtool xport XML feature

# the first location with RRD files will be used
for my $path (qw(/var/lib/weewx /home/weewx/archive
	      /Users/Shared/weewx/archive /var/lib/wview/archive)) {
    if (-s "$path/$wview") {
	chdir $path or die $!;
	last;
    }
}				# or $0.pl could chdir to source:

our $extra;		 # extra variables to track, from config file
our %status;		 # status variables to track, from config file
my $file = '/etc/wview-rrd.pl';	# optional data collector configuration
if (-f $file and -s $file) {
    require $file;
}

# override anything above in configuation file
-f "$0.pl" and ! -w  and require "$0.pl";
# ------------------------------------------------------------

our $rrd;			# array of graph references
our($width, @onchange);		# set by rrdgraphcgi.pl

# param|regex|on|variable|names -> { unit => [ label => RRD CDEF math ] }
# see also &rrdheader below which must match these same options
my %math = (
    'temp|heatindex|windchill|dewpoint' => {
	F => [qw(Fahrenheit	1,*)],
	C => [qw(Celsius	32,-,5,*,9,/)],
    },
    'speed|gust' => {
	mph => ['Miles per Hour',	'1,*'],
	kph => ['Kilometers per Hour',	'1.609344,*'],
	knots => ['Knots',		'.868976241903,*'],
	fps => ['Feet per Second',	'1.46666666666,*'],
	mps => ['Meters per Second',	'.44704,*'],
    },
    'press|altimeter|barometer' => {
	inhg => ['Inches of Mercury',		'1,*'],
	mmhg => ['Millimeters of Mercury',	'25.4,*'],
	mbar => ['Millibars',			'33.8638815789,*'],
	kpa  => ['Kilopascals',			'3.38638815789,*'],
	psi  => ['Pounds per Square Inch',	'.491154077497,*'],
    },
    'depth|rain' => {
	in => [qw(Inches	1,*)],
	cm => [qw(Centimeters	2.54,*)],
	mm => [qw(Millimeters	25.4,*)],
    },
    );
my %label;			# selected unit -> label
for my $re (keys %math) {
    (my $key = $re) =~ s/\|.*//;
    if (my $unit = param($key)) {
	$label{$key} = $math{$re}{$unit}[0];
    }
}

$| = 1;
&rrdinit();
our(@TIME, $YEAR, $end);	# configs in rrdgraphcgi.pl
$install and push @TIME, ($end - $install); # station startup time in seconds

# Defaults from the config file must be set after rrdinit has created
# the CGI object but before rrdheader has drawn the header menus.
our $cgi;
for my $key (keys %def) {
    param($key) or $cgi->param($key => $def{$key});
}

if (param('footer')) {
    print header, start_html,
    "<table><tr valign=top><td>\n";
    for my $file ($wview, $wind, $rain) {
	print "<td>";
	&rrdfooter($file) if -f $file;
	print "\n";
    }
    print "</tr></table>\n";
    print end_html;
    exit;
}

my $tr = param('column') ? "<tr><td>" : "";

push @$rrd, "<tr><td>", &outtemp;
push @$rrd, &intemp if param('indoor');
push @$rrd, $tr, &humidity;
push @$rrd, &inhumidity if param('indoor');
push @$rrd, $tr, &wind,
    checkbox(-name => 'count', @onchange,
	     -title => 'direction counts rather than percents',
	     -label => '');
push @$rrd, $tr, &barometer,
    checkbox(-name => 'pressure', @onchange,
	     -title => 'add local pressure',
	     -label => '');
push @$rrd, $tr, &rain;
push @$rrd, $tr, &rainrate;
push @$rrd, $tr, &uv
    if $extra->{UV};

if (my $graph = param('graph')) {

    &rrdgraph(@{$rrd->[$graph]});

} else {

    &rrdheader($title, undef, undef,
	       # must match %math definitions above
	       [popup_menu(-name => 'temp', @onchange,
			   -title => 'temperature units',
			   -values => [qw/F C/],
			   -default => $def{temp}),
		popup_menu(-name => 'speed', @onchange,
			   -title => 'wind speed units',
			   -values => [qw/mph kph knots fps mps/],
			   -default => $def{speed}),
		popup_menu(-name => 'press', @onchange,
			   -title => 'pressure units',
			   -values => [qw/inhg mmhg mbar kpa psi/],
			   -default => $def{press}),
		popup_menu(-name => 'depth', @onchange,
			   -title => 'rain depth units',
			   -values => [qw/in cm mm/],
			   -default => $def{depth}),
		$link ? $link : ''],
	       undef,
	       [checkbox(-name => 'column', @onchange,
			 -title => 'show graphs in columns'),
		checkbox(-name => 'inout', @onchange,
			 -title => 'add indoor metrics to outdoor graphs'),
		checkbox(-name => 'indoor', @onchange,
			 -title => 'add indoor graphs'),
		(param('inout') || param('indoor')
		 ? (map { checkbox(-name => lc $extra->{$_}[0], @onchange,
				   -title => "add $extra->{$_}[0] sensor") }
		    sort grep { /Temp/ } keys %$extra)
		 : ()),
	       ]);

    if (my $g = param('graphtime')) {
	&rrdgraphtime($g);
    } else {
	&rrdtable($rrd);
    }

    print qq'<hr class="footer">\ngenerated from ',
    &link("3 rrd files", { footer => 1}, 'RRD Info'),
    ", last modified ", scalar(localtime((stat $wview)[9])),
    " by ", a({-href => 'https://github.com/twitham1/wview-rrd'},
	      'wview-rrd'), "\n";

    print end_form, end_html;
}

sub extra {			# plot any extra sensors, if selected
    my($what, $printf) = @_;
    return
	(map { &range($wview, $_,
		      sprintf($printf, $extra->{$_}[0]),
		      $extra->{$_}[1]) }
	 reverse sort grep { /$what/ and param(lc $extra->{$_}[0]) }
	 keys %$extra);
}

sub outtemp {
    my $label = $label{temp} || 'Fahrenheit';
    my $freeze = $label =~ /Celsius/ ? 0 : 32;
    return [
	'Temperature', qw(-Y -v), "Degrees $label",
	(param('inout')
	 ? (&extra('Temp', '%-11s'),
	    &range($wview, 'inTemp',     'INDOOR     ', $indoor))
	 :()),
	&range($wview, 'heatindex', 'Heat Index ', $secondary),
	&range($wview, 'windchill', 'Wind Chill ', $secondary),
	&range($wview, 'dewpoint',  'Dew Point  ', $third),
	&range($wview, 'outTemp',   'Temperature', $primary),
	(param('inout')
	 ? "LINE2:avginTemp#$indoor"
	 : ()),
	"HRULE:$freeze#0000FF88:Freezing = $freeze Degrees $label",
	"LINE2:avgheatindex#$secondary",
	"LINE2:avgwindchill#$secondary",
	"LINE2:avgdewpoint#$third",
	"LINE2:avgoutTemp#$primary",
	];
}

sub intemp {
    my $label = $label{temp} || 'Fahrenheit';
    my $freeze = $label =~ /Celsius/ ? 0 : 32;
    return [
	'INDOOR Temperature', qw(-Y -v), "Degrees $label",
	&extra('Temp', '%-12s'),
	&range($wview, 'inTemp',     'INDOOR      ', $indoor),
	"HRULE:$freeze#0000FF88:Freezing = $freeze Degrees $label",
	];
}

sub humidity {
    return [
	'Humidity', qw(-Y -v), 'Percent',
	(param('inout')
	 ? (&extra('Humid', '%-12s'),
	    &range($wview, 'inHumidity',  'INDOOR      ', $indoor))
	 :()),
	&range($wview, 'outHumidity',   'Humidity    ', $primary),
	];
}

sub inhumidity {
    return [
	'INDOOR Humidity', qw(-Y -v), 'Percent',
	&extra('Humid', '%-12s'),
	&range($wview, 'inHumidity',  'INDOOR      ', $indoor),
	];
}

# Wind direction AVERAGE is meaningless.  So instead, we plot the most
# common wind direction as a color code below the X axis, for both
# gust and average direction.
sub wind {
    my $label = $label{speed} || 'Miles per Hour';
    my @wind = (
	'Wind', qw(-u 10 -Y -v), $label,
	&range($wview, 'windGust',  'Gust   ', $secondary, 0,
	       "COMMENT:Dir ==  0/ -5"),
	&range($wview, 'windSpeed', 'Average', $primary, 0,
	       "COMMENT:Dir == -5/-10"),
	"LINE2:avgwindGust#$secondary",
	"LINE2:avgwindSpeed#$primary",
	);
    my @rose = qw(nw n ne w 0 e sw s se); # wind compass buckets in 3x3 order
    my @dir = grep $_, @rose;	# directions only (no center), colors:
    my %dir = qw(
	nw 0000FF	n 00FFFF	ne 00FF00
	w  800080	0 FFFFFF	e  FFFF00
	sw FF00FF	s FF0000	se FF8000);
    my @doc = ("COMMENT:            (N = cold = blues)\\l",
	       "COMMENT:(W = sunset = dark) * (E = sunrise = bright)\\l",
	       "COMMENT:             (S = hot = reds)\\l");
    for (@dir) {
	push @wind, "DEF:g$_=$wind:g$_:AVERAGE";
	push @wind, "DEF:a$_=$wind:a$_:AVERAGE";
    }
    push @wind, join ',', "CDEF:gmax=0", map { "g$_,MAX" } @dir;
    push @wind, join ',', "CDEF:amax=0", map { "a$_,MAX" } @dir;
    push @wind, join ',', "CDEF:gtot=0", map { "g$_,+" } @dir;
    push @wind, join ',', "CDEF:atot=0", map { "a$_,+" } @dir;
    my $i = 0;
    my @later;	       # defer gust directions to overlay all averages
    for (@rose) {		# 3x3 compass rose directions
	$i++;
	my $color = $dir{$_};
	unless ($_) {		# rose center is just legend labels
	    my $chr = param('count') ? '#' : '%';
	    push @wind, "CDEF:null=gmax,0,MIN";
	    push @wind, "AREA:null#$color: ";
	    push @wind, "COMMENT:Gust$chr";
	    push @wind, "COMMENT:Average$chr";
	    next;
	}
	# plot only the most common bucket direction as an area
	my $chr = length($_) < 2 ? ' ' : '';
	push @wind, "CDEF:gplot$_=g$_,0,GT,g$_,gmax,GE,-5,0,IF,0,IF";
	push @wind, "CDEF:aplot$_=a$_,0,GT,a$_,amax,GE,-10,0,IF,0,IF";
	push @wind, "AREA:aplot$_#$color:\U$_$chr";
	push @later, "AREA:gplot$_#$color"; # defer gust overlay
	if (param('count')) {	# bucket counts in the legend
	    push @wind, "VDEF:totg$_=g$_,TOTAL";
	    push @wind, "VDEF:tota$_=a$_,TOTAL";
	    push @wind, "GPRINT:totg$_:%6.0lf";
	    push @wind, "GPRINT:tota$_:%6.0lf";
	} else {		# bucket percentages in the legend
	    push @wind, "CDEF:gpct$_=g$_,gtot,/,100,*";
	    push @wind, "VDEF:pctg$_=gpct$_,AVERAGE";
	    push @wind, "CDEF:apct$_=a$_,atot,/,100,*";
	    push @wind, "VDEF:pcta$_=apct$_,AVERAGE";
	    push @wind, "GPRINT:pctg$_:%5.1lf%%";
	    push @wind, "GPRINT:pcta$_:%5.1lf%%";
	}
	$i % 3 and next;
	push @wind, ($width > 600 ? (shift @doc) : "COMMENT:\\l");
    }
    push @wind, @later;	# gust directions overlay now that average is done
    return [ @wind ];
}

sub barometer {
    my($label, $mult) =
	(@{$math{'press|altimeter|barometer'}{param('press') || 'inhg'}});
    $mult =~ s/,\*//;
    my $atmos = 29.9212598425 * $mult; # 1 atm = standard atmosphere
    return [
	'Barometer', qw(-Y -v), $label,
	(param('pressure')
	 ? &range($wview, 'pressure',  'Pressure ', $third)
	 : ()),
	&range($wview, 'altimeter', 'Altimeter', $secondary),
	&range($wview, 'barometer', 'Barometer', $primary),
	sprintf("HRULE:%f#0000FF88:Standard Atmosphere (1 atm) = %.3f %s",
		$atmos, $atmos, $label),
	"LINE2:avgaltimeter#$secondary",
	"LINE2:avgbarometer#$primary",
	];
}

sub rain {
    my $label = $label{depth} || 'Inches';
    return [
	'Rain', qw(-Y -v), "$label Year to Date",
	&range($rain, 'totalRain', 'Rain', $primary),

	"CDEF:rain=lasttotalRain,UN,PREV,lasttotalRain,IF", # U->same
	"CDEF:delta=rain,PREV(rain),UN,rain,PREV(rain),IF,-", # change
	"CDEF:add=delta,-0.0001,LT,rain,delta,IF", # counter reset
	"CDEF:sum=PREV,UN,0,PREV,IF,add,+", # running sum of rain

	# "CDEF:rain=lasttotalRain,UN,PREV,lasttotalRain,IF", # U->same
	# "CDEF:delta=rain,PREV(rain),UN,rain,PREV(rain),IF,-", # change
	# "CDEF:alt=maxtotalRain,mintotalRain,-",		      # range
	# "CDEF:add=delta,-0.0001,LT,rain,delta,alt,MAX,IF", # counter reset
	# "CDEF:sum=PREV,UN,0,PREV,IF,add,+", # running sum of rain

	"VDEF:sumRain=sum,LAST",
	"GPRINT:sumRain:(%.2lf $label of Rain to",
	"GPRINT:sumRain:%a %b %d %H\\:%M %Y)\\l:strftime",
	];
}

sub rainrate {
    my $label = $label{depth} || 'Inches';
    return [
	'Rain Rate', qw(-Y -v), "$label Per Hour",
	&range($wview, 'rainRate', 'Rain Rate', $primary),
	];
}

sub uv {
    return [
	'Ultra Violet', qw(-Y -v), 'Ultra Violet Index',
	&range($wview, 'UV', 'Ultra Violet', $primary),
	];
}

BEGIN {
    my $offset = 0;			# dash-offset
# return RRD code to plot range of given $var from $file in $color
sub range {
    my($file, $var, $label, $color, $alpha, $more) = @_;
    $label = $var unless $label;
    $color = '000000' unless $color;
    $alpha = '88' unless $alpha;
    $offset += 3; $offset = 0 if $offset > 12;
    my $math = '1,*';
    for my $re (keys %math) {
	if ($var =~ /$re/i) {
	    (my $key = $re) =~ s/\|.*//;
	    my $this = $math{$re}{param($key)};
	    $this and $math = $this->[1];
	    last;
	}
    }
    return (
	"DEF:tmpavg$var=$file:$var:AVERAGE",
	"CDEF:avg$var=tmpavg$var,$math",
	"VDEF:avgavg$var=avg$var,AVERAGE",

	"DEF:tmpmin$var=$file:$var:MIN",
	"CDEF:min$var=tmpmin$var,$math",
	"VDEF:minmin$var=min$var,MINIMUM",

	"DEF:tmpmax$var=$file:$var:MAX",
	"CDEF:max$var=tmpmax$var,$math",
	"VDEF:maxmax$var=max$var,MAXIMUM",

	"DEF:tmplast$var=$file:$var:LAST",
	"CDEF:last$var=tmplast$var,$math",
	"VDEF:lastlast$var=last$var,LAST",

	"CDEF:diff$var=max$var,min$var,-",

	"VRULE:minmin$var#${color}${alpha}::dashes=3,9:dash-offset=$offset",
	"VRULE:maxmax$var#${color}${alpha}::dashes=3,9:dash-offset=$offset",
	"HRULE:avgavg$var#${color}${alpha}::dashes=3,9:dash-offset=$offset",
	"LINE1:min$var#${color}00",
	"AREA:diff$var#${color}${alpha}::STACK",
	"LINE2:avg$var#${color}:$label",
	"GPRINT:minmin$var:(%6.2lf  <",
	"GPRINT:avgavg$var:%6.2lf  <",
	"GPRINT:maxmax$var:%6.2lf)",
	"GPRINT:lastlast$var:%6.2lf",
	($more ? $more : ()),
	($width > 600
	 ? ("GPRINT:minmin$var:(%a %b %d %H\\:%M %Y  <:strftime",
	    "GPRINT:maxmax$var:%a %b %d %H\\:%M %Y)\\l:strftime")
	 : ("COMMENT:\\l")),
	);
}
}
